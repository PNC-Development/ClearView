using System;
using System.Collections.Generic;
using System.Text;
using Tamir.SharpSsh;
using Tamir.Streams;
using System.Threading;
using NCC.ClearView.Application.Core;
using System.IO;
using System.Data;
using System.Diagnostics;

namespace ClearViewAP_Physical
{
    public class SolarisBuild
    {
        private int intServer = 0;
        private string strName = "";
        private string strTo = "";
        private string strCC = "";
        private string strSerial = "";
        private string strAsset = "";
        private int intAsset = 0;
        private string strILO = "";
        private SshShell oSSHshell;
        private CombinedStream oSSHstream;
        private int intStep = 0;
        private string dsn = "";
        private string dsnAsset = "";
        private string strScripts;
        private int intEnvironment;
        private int intLogging;
        private bool boolSSHDebug;

        private DateTime datStart;
        private int intTimeout = 5;
        private int intTimeoutStep = 0;
        private string strSSH = "";
        private Servers oServer;
        private Models oModel;
        private ModelsProperties oModelsProperties;
        private int intModel = 0;
        private string strModel = "";
        private Settings oSetting;
        private OnDemand oOnDemand;
        private Log oEventLog;
        private Variables oVariable;
        private Functions oFunction;
        private bool boolSolarisDebugging = false;
        private int intRequest = 0;
        private int intService = 0;
        private int intResourceRequestApprove = 0;
        private int intAssignPage = 0;
        private int intViewPage = 0;
        private string dsnServiceEditor;
        private string dsnIP;
        private bool boolEmailError = false;

        private string strSSH_Carriage = "\r";
        private string strSubSSH = "ssh\\";
        private int[] arProcessing;

        public SolarisBuild(int _serverid, string _name, Variables _variable, string _cc, string _serial, string _asset, int _assetid, string _ilo, int _step, string _dsn, string _dsn_asset, string _scripts, int _environment, int _logging, bool _debug, int _requestid, int _serviceid, int _resourcerequestapprove, int _assignpage, int _viewpage, string _dsn_ip, string _dsn_service_editor, bool _email_error)
		{
            intServer = _serverid;
            strName = _name;
            oVariable = _variable;
            strCC = _cc;
            strSerial = _serial;
            strAsset = _asset;
            intAsset = _assetid;
            strILO = _ilo;
            intStep = _step;
            dsn = _dsn;
            dsnAsset = _dsn_asset;
            strScripts = _scripts;
            intEnvironment = _environment;
            intLogging = _logging;
            boolSSHDebug = _debug;
            intRequest = _requestid;
            intService = _serviceid;
            intResourceRequestApprove = _resourcerequestapprove;
            intAssignPage = _assignpage;
            intViewPage = _viewpage;
            dsnServiceEditor = _dsn_service_editor;
            dsnIP = _dsn_ip;
            boolEmailError = _email_error;
        }

        public void Begin()
        {
            datStart = DateTime.Now;
            arProcessing = new int[5] { 8, 45, 47, 92, 124 };   // 8 = backspace, 92 = \, 124 = |, 47 = /, 45 = -
            strSSH = "";
            oModel = new Models(0, dsn);
            oModelsProperties = new ModelsProperties(0, dsn);
            oServer = new Servers(0, dsn);
            oSetting = new Settings(0, dsn);
            oOnDemand = new OnDemand(0, dsn);
            oEventLog = new Log(0, dsn);
            oFunction = new Functions(0, dsn, intEnvironment);
            strTo = oFunction.GetGetEmailAlertsEmailIds("EMAILGRP_PROVISIONING_SUPPORT");
            oSSHshell = new SshShell(strILO, oVariable.SolarisUsername(), oVariable.SolarisPassword());
            oSSHshell.RemoveTerminalEmulationCharacters = true;
            oSSHshell.Connect();
            oEventLog.AddEvent(strName, strSerial, "Connected to " + strILO + "...sending commands...", LoggingType.Information);
            oSSHstream = (CombinedStream)(oSSHshell.GetStream());

            intModel = Int32.Parse(oServer.Get(intServer, "modelid"));
            if (intModel > 0)
                strModel = oModelsProperties.Get(intModel, "name");

            //ThreadStart oReadingSSH = new ThreadStart(ReadingSSH);
            //Thread oJobReadingSSH = new Thread(oReadingSSH);
            //oJobReadingSSH.Start();

            ThreadStart oReadingDoneSSH = new ThreadStart(ReadingDoneSSH);
            Thread oJobReadingDoneSSH = new Thread(oReadingDoneSSH);
            oJobReadingDoneSSH.Start();

            ReadingSSH();
        }

        private void ReadingSSH()
        {
            try
            {
                if (intServer > 0)
                {
                    int bt = 0;
                    int intMinutePrevious = 0;
                    bool boolProcessing = false;
                    while (bt != -1 && oSSHshell.Connected == true && oSSHshell.ShellOpened == true)
                    {
                        bt = oSSHstream.ReadByte();
                        // Strip the processing cursor -\|/-\|/ from the output
                        if (bt == 8)    // 8 = backspace
                        {
                            // Check to see if previous characters were a processing character as well
                            char chrSSH = strSSH[strSSH.Length - 1];
                            int intSymbol = (int)chrSSH;
                            while (IsGarbageChar(intSymbol) == true)
                            {
                                if (intLogging > 1)
                                    oEventLog.AddEvent(strName, strSerial, "The symbol [" + chrSSH.ToString() + "] is a garbage character and must be removed", LoggingType.Information);
                                strSSH = strSSH.Substring(0, strSSH.Length - 1);
                                chrSSH = strSSH[strSSH.Length - 1];
                                intSymbol = (int)chrSSH;
                            }
                            // Set processing to true to exclude future characters
                            boolProcessing = true;
                        }
                        if (boolProcessing == true && IsGarbageChar(bt) == false)
                            boolProcessing = false;
                        if (boolProcessing == false)
                            strSSH += (char)bt;

                        int intImmediately = 1;
                        DataSet dsSSH = oModel.GetBootGroupStepNext(intModel, intServer);
                        for (int ii = 0; ii < dsSSH.Tables[0].Rows.Count && intImmediately == 1; ii++)
                        {
                            string strReadSSH = dsSSH.Tables[0].Rows[ii]["wait_for"].ToString();
                            string strWriteSSH = dsSSH.Tables[0].Rows[ii]["then_write"].ToString();
                            intImmediately = (dsSSH.Tables[0].Rows[ii]["immediately"].ToString() == "1" ? 1 : 0);
                            bool boolPower = (dsSSH.Tables[0].Rows[ii]["power"].ToString() == "1");

                            if (strReadSSH != "" && strSSH.EndsWith(strReadSSH) == true)
                            {
                                try
                                {
                                    oEventLog.AddEvent(strName, strSerial, "SSH output ends with [" + strReadSSH + "] : " + strSSH, LoggingType.Information);
                                }
                                catch { }

                                datStart = DateTime.Now;
                                intTimeoutStep = Int32.Parse(dsSSH.Tables[0].Rows[ii]["id"].ToString());
                                intTimeout = Int32.Parse(dsSSH.Tables[0].Rows[ii]["timeout"].ToString());
                                boolSolarisDebugging = false;

                                if (boolPower == true)
                                {
                                    // Power on step completed, move to next step
                                    AddResult("");
                                    oEventLog.AddEvent(strName, strSerial, "POWER ON command sent...moving to next step", LoggingType.Information);
                                }

                                // Execute next command
                                byte[] byt = new byte[100];
                                string str = strWriteSSH + strSSH_Carriage;
                                byt = System.Text.ASCIIEncoding.ASCII.GetBytes(str);
                                if (oSSHshell.Connected == true && oSSHshell.ShellOpened == true)
                                {
                                    try
                                    {
                                        oEventLog.AddEvent(strName, strSerial, "Sending command [" + strWriteSSH + "] : " + strSSH, LoggingType.Information);
                                    }
                                    catch { }
                                    oSSHstream.Write(byt);
                                    oSSHstream.Flush();
                                    oEventLog.AddEvent(strName, strSerial, "Finished writing [" + strWriteSSH + "]", LoggingType.Information);
                                }

                                // Update database
                                oServer.AddOutput(intServer, strWriteSSH, strReadSSH);
                            }
                            else
                            {
                                bool boolSolarisDebug = false;
                                int intSolarisDebug = 0;
                                if (Int32.TryParse(oSetting.Get("solaris_debug"), out intSolarisDebug) == true)
                                {
                                    if (intSolarisDebug > 0)
                                    {
                                        int intMinute = DateTime.Now.Minute;
                                        if (intMinute % intSolarisDebug == 0 && boolSolarisDebugging == false)
                                        {
                                            boolSolarisDebug = true;
                                            boolSolarisDebugging = true;
                                            intMinutePrevious = intMinute;
                                        }
                                        else if (intMinutePrevious != intMinute)
                                        {
                                            boolSolarisDebugging = false;
                                        }
                                    }
                                }

                                if (boolSSHDebug == true && boolSolarisDebug == true)
                                    oEventLog.AddEvent(strName, strSerial, "SSH DEBUG: [" + strSSH + "] does not end with [" + strReadSSH + "]", LoggingType.Debug);
                            }
                        }
                    }
                    oEventLog.AddEvent(strName, strSerial, "Exited ReadingSSH Loop for SERVERID = " + intServer.ToString(), LoggingType.Information);
                }
            }
            catch (Exception ex)
            {
                string strError = "Physical Service (SolarisBuild - ReadingSSH): " + "(Error Message: " + ex.Message + ") (Source: " + ex.Source + ") (Stack Trace: " + ex.StackTrace + ") [" + System.Environment.UserName + "]";
                SystemError(intServer, intStep, strError, intAsset, intModel);
            }
        }
        private void ReadingDoneSSH()
        {
            try
            {
                bool boolTimeout = false;
                int intMinutePrevious = 0;
                if (intServer > 0)
                {
                    string strDHCP = oServer.Get(intServer, "dhcp");
                    while (boolTimeout == false && (strDHCP == "" || strDHCP == "0" || strDHCP == "SUCCESS"))
                    {
                        bool boolSolarisDebug = false;
                        int intSolarisDebug = 0;
                        if (Int32.TryParse(oSetting.Get("solaris_debug"), out intSolarisDebug) == true)
                        {
                            if (intSolarisDebug > 0)
                            {
                                int intMinute = DateTime.Now.Minute;
                                if (intMinute % intSolarisDebug == 0 && boolSolarisDebugging == false)
                                {
                                    boolSolarisDebug = true;
                                    boolSolarisDebugging = true;
                                    intMinutePrevious = intMinute;
                                }
                                else if (intMinutePrevious != intMinute)
                                {
                                    boolSolarisDebugging = false;
                                }
                            }
                        }

                        if (boolSSHDebug == true && boolSolarisDebug == true)
                            AddLogSSH(strName);

                        TimeSpan datSpan = DateTime.Now.Subtract(datStart);
                        if (intTimeout <= 0)
                            intTimeout = 180;   // Default: 4 hours = 60 x 3 = 180
                        int intMinutes = datSpan.Hours;
                        intMinutes = intMinutes * 60;
                        intMinutes += datSpan.Minutes;
                        boolTimeout = (intMinutes >= intTimeout);
                        if (boolSSHDebug == true && boolSolarisDebug == true)
                            oEventLog.AddEvent(strName, strSerial, "Solaris DEBUG: Checking SERVERID = " + intServer.ToString() + ", DHCP = " + strDHCP + ", timeout = " + intTimeout.ToString() + " <= " + intMinutes.ToString() + " [started = " + datStart.ToString() + "], boolTimeout = " + boolTimeout.ToString(), LoggingType.Information);
                        if (boolTimeout == true)
                        {
                            // Step has timed out, throw error and kill everything.
                            string strNow = datStart.Day.ToString() + datStart.Month.ToString() + datStart.Year.ToString() + datStart.Hour.ToString() + datStart.Minute.ToString() + datStart.Second.ToString() + datStart.Millisecond.ToString();
                            oServer.AddOutput(intServer, "BUILD_ERROR_" + strNow, strSSH);
                            AddResult("The current step has reached its timeout ~ (Step = " + intTimeoutStep.ToString() + ") (Timeout = " + intTimeout.ToString() + " minutes)");
                        }

                        // Sleep 30 seconds before going again
                        Thread.Sleep(30000);
                        strDHCP = oServer.Get(intServer, "dhcp");
                    }

                    oEventLog.AddEvent(strName, strSerial, "Exited ReadingDoneSSH Loop for SERVERID = " + intServer.ToString() + ", DHCP = " + strDHCP, LoggingType.Information);

                    if (boolTimeout == false)
                    {
                        // DHCP has been set...completed with build...
                        oServer.AddOutput(intServer, "BUILD", strSSH);
                        // AddResult("");   // No need to increment step since main thread will do that for us...just log the output.
                    }
                    else
                        oServer.AddOutput(intServer, "TIMEOUT", strSSH);
                    
                    // Close the following to break the "ReadingSSH" thread
                    oSSHstream.Close();
                    oSSHshell.Close();
                }
            }
            catch (Exception ex)
            {
                string strError = "Physical Service (SolarisBuild - ReadingDoneSSH): " + "(Error Message: " + ex.Message + ") (Source: " + ex.Source + ") (Stack Trace: " + ex.StackTrace + ") [" + System.Environment.UserName + "]";
                SystemError(intServer, intStep, strError, intAsset, intModel);
            }
        }
        private bool IsGarbageChar(int intChar)
        {
            // This function will remove the garbage / processing characters from the output (such as -\|/-\|/)
            bool boolGarbage = false;
            for (int ii = 0; ii < arProcessing.Length; ii++)
            {
                if (intChar == arProcessing[ii])
                {
                    boolGarbage = true;
                    break;
                }
            }
            return boolGarbage;
        }
        private void AddResult(string strError)
        {
            if (strError == "")
            {
                oOnDemand.UpdateStepDoneServer(intServer, intStep, oOnDemand.GetStep(intStep, "done"), 0, false, false);
                oServer.NextStep(intServer);
                intStep++;
            }
            else
            {
                oEventLog.AddEvent(strName, strSerial, strError, LoggingType.Error);
                //Functions oFunction = new Functions(0, dsn, intEnvironment);
                //Variables oVariable = new Variables(intEnvironment);
                oOnDemand.UpdateStepDoneServer(intServer, intStep, strError, 1, false, false);

                // Generic Error Request
                Services oService = new Services(0, dsn);
                ResourceRequest oResourceRequest = new ResourceRequest(0, dsn);
                ServiceRequests oServiceRequest = new ServiceRequests(0, dsn);
                int intProvisioningErrorService = intService;
                int intProvisioningErrorItem = oService.GetItemId(intProvisioningErrorService);
                int intProvisioningErrorNumber = oResourceRequest.GetNumber(intRequest, intProvisioningErrorItem);
                int intError = oServer.AddError(intRequest, intProvisioningErrorItem, intProvisioningErrorNumber, intServer, intStep, strError);
                int intProvisioningError = oResourceRequest.Add(intRequest, intProvisioningErrorItem, intProvisioningErrorService, intProvisioningErrorNumber, "Provisioning Error (" + strName + ")", 1, 0.00, 2, 1, 1, 1);
                if (oServiceRequest.NotifyApproval(intRequest, intResourceRequestApprove, intEnvironment, "") == false)
                    oServiceRequest.NotifyTeamLead(intProvisioningErrorItem, intProvisioningError, intAssignPage, intViewPage, intEnvironment, "", dsnServiceEditor, dsnAsset, dsnIP, 0);
                if (boolEmailError == true)
                    oFunction.SendEmail("Auto-Provisioning ERROR: " + strName, strTo, strCC, "", "Auto-Provisioning ERROR: " + strName, "<p><b>This message is to inform you that the server " + strName + " has encountered an error and has been stopped!</b><p><p>Serial Number: " + strSerial.ToUpper() + "<br/>Asset Tag: " + strAsset.ToUpper() + "<br/>Model: " + strModel.ToUpper() + "<br/>Step #: " + intStep.ToString() + "<br/>Error: " + strError + "<br/>ILO: <a href=\"https://" + strILO + "\" target=\"_blank\">" + strILO + "</a></p><p>When this issue has been resolved, <a href=\"" + oVariable.URL() + "/admin/errors_server.aspx?id=" + intServer.ToString() + "\" target=\"_blank\">click here</a> to clear this error and continue with the build.</p>", true, false);
            }
        }
        private void AddLogSSH(string _type)
        {
            _type = oFunction.OnlyLettersAndNumbersFromString(_type);
            string strFolder = strScripts + strSubSSH;
            if (Directory.Exists(strFolder) == false)
                Directory.CreateDirectory(strFolder);

            string strFile = strFolder + intServer.ToString() + "_" + _type + ".txt";
            StreamWriter oWriterSSH = new StreamWriter(strFile);
            oWriterSSH.Write(strSSH);
            oWriterSSH.Flush();
            oWriterSSH.Close();
        }

        private void SystemError(int _server, int _stepid, string _error, int _assetid, int _modelid)
        {
            Settings oSetting = new Settings(0, dsn);
            oSetting.SystemError(_server, 0, _stepid, _error, _assetid, _modelid, false, null, intEnvironment, dsnAsset);
        }
    }
}
