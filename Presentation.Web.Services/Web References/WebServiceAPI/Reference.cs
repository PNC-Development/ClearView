//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.18408.
// 
#pragma warning disable 1591

namespace Presentation.Web.Services.WebServiceAPI {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ClearViewWebServicesSoap", Namespace="http://tempuri.org/")]
    public partial class ClearViewWebServices : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback CreateDNSforPNCOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateDNSforPNCOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteDNSforPNCOperationCompleted;
        
        private System.Threading.SendOrPostCallback SearchDNSforPNCOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMacFromILOOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateBluecatDNSOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateBluecatDNSOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteBluecatDNSOperationCompleted;
        
        private System.Threading.SendOrPostCallback SearchBluecatDNSOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateBluecatDescriptionDNSOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAvamarGridOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddAvamarClientOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAvamarClientOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateAvamarClientOperationCompleted;
        
        private System.Threading.SendOrPostCallback ActivateAvamarClientOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteAvamarClientOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAvamarDomainsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAvamarDomainClientsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAvamarGroupsOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddAvamarGroupOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAvamarGroupClientsOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteAvamarGroupOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAvamarBackupOperationCompleted;
        
        private System.Threading.SendOrPostCallback StartAvamarBackupOperationCompleted;
        
        private System.Threading.SendOrPostCallback ConfigureWindowsIPAddressOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateServiceNowServerOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetServiceNowServerOperationCompleted;
        
        private System.Threading.SendOrPostCallback DecomServiceNowServerOperationCompleted;
        
        private System.Threading.SendOrPostCallback DestroyServiceNowServerOperationCompleted;
        
        private System.Threading.SendOrPostCallback RecomServiceNowServerOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetServiceNowIncidentNumberOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetServiceNowIncidentOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public ClearViewWebServices() {
            this.Url = global::Presentation.Web.Services.Properties.Settings.Default.Presentation_Web_Services_WebServiceAPI_ClearViewWebServices;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event CreateDNSforPNCCompletedEventHandler CreateDNSforPNCCompleted;
        
        /// <remarks/>
        public event UpdateDNSforPNCCompletedEventHandler UpdateDNSforPNCCompleted;
        
        /// <remarks/>
        public event DeleteDNSforPNCCompletedEventHandler DeleteDNSforPNCCompleted;
        
        /// <remarks/>
        public event SearchDNSforPNCCompletedEventHandler SearchDNSforPNCCompleted;
        
        /// <remarks/>
        public event GetMacFromILOCompletedEventHandler GetMacFromILOCompleted;
        
        /// <remarks/>
        public event CreateBluecatDNSCompletedEventHandler CreateBluecatDNSCompleted;
        
        /// <remarks/>
        public event UpdateBluecatDNSCompletedEventHandler UpdateBluecatDNSCompleted;
        
        /// <remarks/>
        public event DeleteBluecatDNSCompletedEventHandler DeleteBluecatDNSCompleted;
        
        /// <remarks/>
        public event SearchBluecatDNSCompletedEventHandler SearchBluecatDNSCompleted;
        
        /// <remarks/>
        public event UpdateBluecatDescriptionDNSCompletedEventHandler UpdateBluecatDescriptionDNSCompleted;
        
        /// <remarks/>
        public event GetAvamarGridCompletedEventHandler GetAvamarGridCompleted;
        
        /// <remarks/>
        public event AddAvamarClientCompletedEventHandler AddAvamarClientCompleted;
        
        /// <remarks/>
        public event GetAvamarClientCompletedEventHandler GetAvamarClientCompleted;
        
        /// <remarks/>
        public event UpdateAvamarClientCompletedEventHandler UpdateAvamarClientCompleted;
        
        /// <remarks/>
        public event ActivateAvamarClientCompletedEventHandler ActivateAvamarClientCompleted;
        
        /// <remarks/>
        public event DeleteAvamarClientCompletedEventHandler DeleteAvamarClientCompleted;
        
        /// <remarks/>
        public event GetAvamarDomainsCompletedEventHandler GetAvamarDomainsCompleted;
        
        /// <remarks/>
        public event GetAvamarDomainClientsCompletedEventHandler GetAvamarDomainClientsCompleted;
        
        /// <remarks/>
        public event GetAvamarGroupsCompletedEventHandler GetAvamarGroupsCompleted;
        
        /// <remarks/>
        public event AddAvamarGroupCompletedEventHandler AddAvamarGroupCompleted;
        
        /// <remarks/>
        public event GetAvamarGroupClientsCompletedEventHandler GetAvamarGroupClientsCompleted;
        
        /// <remarks/>
        public event DeleteAvamarGroupCompletedEventHandler DeleteAvamarGroupCompleted;
        
        /// <remarks/>
        public event GetAvamarBackupCompletedEventHandler GetAvamarBackupCompleted;
        
        /// <remarks/>
        public event StartAvamarBackupCompletedEventHandler StartAvamarBackupCompleted;
        
        /// <remarks/>
        public event ConfigureWindowsIPAddressCompletedEventHandler ConfigureWindowsIPAddressCompleted;
        
        /// <remarks/>
        public event CreateServiceNowServerCompletedEventHandler CreateServiceNowServerCompleted;
        
        /// <remarks/>
        public event GetServiceNowServerCompletedEventHandler GetServiceNowServerCompleted;
        
        /// <remarks/>
        public event DecomServiceNowServerCompletedEventHandler DecomServiceNowServerCompleted;
        
        /// <remarks/>
        public event DestroyServiceNowServerCompletedEventHandler DestroyServiceNowServerCompleted;
        
        /// <remarks/>
        public event RecomServiceNowServerCompletedEventHandler RecomServiceNowServerCompleted;
        
        /// <remarks/>
        public event GetServiceNowIncidentNumberCompletedEventHandler GetServiceNowIncidentNumberCompleted;
        
        /// <remarks/>
        public event GetServiceNowIncidentCompletedEventHandler GetServiceNowIncidentCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateDNSforPNC", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CreateDNSforPNC(string ObjectAddress, string ObjectName, string ObjectClass, string Aliases, string DomainName, string NameService, string DynamicDNSUpdate, int intUser, int intAnswer, bool boolDeleteFiles) {
            object[] results = this.Invoke("CreateDNSforPNC", new object[] {
                        ObjectAddress,
                        ObjectName,
                        ObjectClass,
                        Aliases,
                        DomainName,
                        NameService,
                        DynamicDNSUpdate,
                        intUser,
                        intAnswer,
                        boolDeleteFiles});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CreateDNSforPNCAsync(string ObjectAddress, string ObjectName, string ObjectClass, string Aliases, string DomainName, string NameService, string DynamicDNSUpdate, int intUser, int intAnswer, bool boolDeleteFiles) {
            this.CreateDNSforPNCAsync(ObjectAddress, ObjectName, ObjectClass, Aliases, DomainName, NameService, DynamicDNSUpdate, intUser, intAnswer, boolDeleteFiles, null);
        }
        
        /// <remarks/>
        public void CreateDNSforPNCAsync(string ObjectAddress, string ObjectName, string ObjectClass, string Aliases, string DomainName, string NameService, string DynamicDNSUpdate, int intUser, int intAnswer, bool boolDeleteFiles, object userState) {
            if ((this.CreateDNSforPNCOperationCompleted == null)) {
                this.CreateDNSforPNCOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateDNSforPNCOperationCompleted);
            }
            this.InvokeAsync("CreateDNSforPNC", new object[] {
                        ObjectAddress,
                        ObjectName,
                        ObjectClass,
                        Aliases,
                        DomainName,
                        NameService,
                        DynamicDNSUpdate,
                        intUser,
                        intAnswer,
                        boolDeleteFiles}, this.CreateDNSforPNCOperationCompleted, userState);
        }
        
        private void OnCreateDNSforPNCOperationCompleted(object arg) {
            if ((this.CreateDNSforPNCCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateDNSforPNCCompleted(this, new CreateDNSforPNCCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateDNSforPNC", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UpdateDNSforPNC(string ObjectAddress, string ObjectName, string ObjectClass, string Aliases, string DomainName, string NameService, string DynamicDNSUpdate, int intUser, int intAnswer, bool boolDeleteFiles) {
            object[] results = this.Invoke("UpdateDNSforPNC", new object[] {
                        ObjectAddress,
                        ObjectName,
                        ObjectClass,
                        Aliases,
                        DomainName,
                        NameService,
                        DynamicDNSUpdate,
                        intUser,
                        intAnswer,
                        boolDeleteFiles});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateDNSforPNCAsync(string ObjectAddress, string ObjectName, string ObjectClass, string Aliases, string DomainName, string NameService, string DynamicDNSUpdate, int intUser, int intAnswer, bool boolDeleteFiles) {
            this.UpdateDNSforPNCAsync(ObjectAddress, ObjectName, ObjectClass, Aliases, DomainName, NameService, DynamicDNSUpdate, intUser, intAnswer, boolDeleteFiles, null);
        }
        
        /// <remarks/>
        public void UpdateDNSforPNCAsync(string ObjectAddress, string ObjectName, string ObjectClass, string Aliases, string DomainName, string NameService, string DynamicDNSUpdate, int intUser, int intAnswer, bool boolDeleteFiles, object userState) {
            if ((this.UpdateDNSforPNCOperationCompleted == null)) {
                this.UpdateDNSforPNCOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateDNSforPNCOperationCompleted);
            }
            this.InvokeAsync("UpdateDNSforPNC", new object[] {
                        ObjectAddress,
                        ObjectName,
                        ObjectClass,
                        Aliases,
                        DomainName,
                        NameService,
                        DynamicDNSUpdate,
                        intUser,
                        intAnswer,
                        boolDeleteFiles}, this.UpdateDNSforPNCOperationCompleted, userState);
        }
        
        private void OnUpdateDNSforPNCOperationCompleted(object arg) {
            if ((this.UpdateDNSforPNCCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateDNSforPNCCompleted(this, new UpdateDNSforPNCCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteDNSforPNC", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DeleteDNSforPNC(string ObjectAddress, string ObjectName, int intUser, bool boolDeleteFiles) {
            object[] results = this.Invoke("DeleteDNSforPNC", new object[] {
                        ObjectAddress,
                        ObjectName,
                        intUser,
                        boolDeleteFiles});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteDNSforPNCAsync(string ObjectAddress, string ObjectName, int intUser, bool boolDeleteFiles) {
            this.DeleteDNSforPNCAsync(ObjectAddress, ObjectName, intUser, boolDeleteFiles, null);
        }
        
        /// <remarks/>
        public void DeleteDNSforPNCAsync(string ObjectAddress, string ObjectName, int intUser, bool boolDeleteFiles, object userState) {
            if ((this.DeleteDNSforPNCOperationCompleted == null)) {
                this.DeleteDNSforPNCOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteDNSforPNCOperationCompleted);
            }
            this.InvokeAsync("DeleteDNSforPNC", new object[] {
                        ObjectAddress,
                        ObjectName,
                        intUser,
                        boolDeleteFiles}, this.DeleteDNSforPNCOperationCompleted, userState);
        }
        
        private void OnDeleteDNSforPNCOperationCompleted(object arg) {
            if ((this.DeleteDNSforPNCCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteDNSforPNCCompleted(this, new DeleteDNSforPNCCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SearchDNSforPNC", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SearchDNSforPNC(string ObjectAddress, string ObjectName, bool boolIsAlias, bool boolDeleteFiles) {
            object[] results = this.Invoke("SearchDNSforPNC", new object[] {
                        ObjectAddress,
                        ObjectName,
                        boolIsAlias,
                        boolDeleteFiles});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SearchDNSforPNCAsync(string ObjectAddress, string ObjectName, bool boolIsAlias, bool boolDeleteFiles) {
            this.SearchDNSforPNCAsync(ObjectAddress, ObjectName, boolIsAlias, boolDeleteFiles, null);
        }
        
        /// <remarks/>
        public void SearchDNSforPNCAsync(string ObjectAddress, string ObjectName, bool boolIsAlias, bool boolDeleteFiles, object userState) {
            if ((this.SearchDNSforPNCOperationCompleted == null)) {
                this.SearchDNSforPNCOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSearchDNSforPNCOperationCompleted);
            }
            this.InvokeAsync("SearchDNSforPNC", new object[] {
                        ObjectAddress,
                        ObjectName,
                        boolIsAlias,
                        boolDeleteFiles}, this.SearchDNSforPNCOperationCompleted, userState);
        }
        
        private void OnSearchDNSforPNCOperationCompleted(object arg) {
            if ((this.SearchDNSforPNCCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SearchDNSforPNCCompleted(this, new SearchDNSforPNCCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetMacFromILO", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetMacFromILO(string _ilo, int _environment, bool _delete_files) {
            object[] results = this.Invoke("GetMacFromILO", new object[] {
                        _ilo,
                        _environment,
                        _delete_files});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetMacFromILOAsync(string _ilo, int _environment, bool _delete_files) {
            this.GetMacFromILOAsync(_ilo, _environment, _delete_files, null);
        }
        
        /// <remarks/>
        public void GetMacFromILOAsync(string _ilo, int _environment, bool _delete_files, object userState) {
            if ((this.GetMacFromILOOperationCompleted == null)) {
                this.GetMacFromILOOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMacFromILOOperationCompleted);
            }
            this.InvokeAsync("GetMacFromILO", new object[] {
                        _ilo,
                        _environment,
                        _delete_files}, this.GetMacFromILOOperationCompleted, userState);
        }
        
        private void OnGetMacFromILOOperationCompleted(object arg) {
            if ((this.GetMacFromILOCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMacFromILOCompleted(this, new GetMacFromILOCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateBluecatDNS", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CreateBluecatDNS(string ObjectAddress, string ObjectName, string Description, string MacAddress) {
            object[] results = this.Invoke("CreateBluecatDNS", new object[] {
                        ObjectAddress,
                        ObjectName,
                        Description,
                        MacAddress});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CreateBluecatDNSAsync(string ObjectAddress, string ObjectName, string Description, string MacAddress) {
            this.CreateBluecatDNSAsync(ObjectAddress, ObjectName, Description, MacAddress, null);
        }
        
        /// <remarks/>
        public void CreateBluecatDNSAsync(string ObjectAddress, string ObjectName, string Description, string MacAddress, object userState) {
            if ((this.CreateBluecatDNSOperationCompleted == null)) {
                this.CreateBluecatDNSOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateBluecatDNSOperationCompleted);
            }
            this.InvokeAsync("CreateBluecatDNS", new object[] {
                        ObjectAddress,
                        ObjectName,
                        Description,
                        MacAddress}, this.CreateBluecatDNSOperationCompleted, userState);
        }
        
        private void OnCreateBluecatDNSOperationCompleted(object arg) {
            if ((this.CreateBluecatDNSCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateBluecatDNSCompleted(this, new CreateBluecatDNSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateBluecatDNS", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UpdateBluecatDNS(string ObjectAddress, string ObjectName, string Description, string MacAddress) {
            object[] results = this.Invoke("UpdateBluecatDNS", new object[] {
                        ObjectAddress,
                        ObjectName,
                        Description,
                        MacAddress});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateBluecatDNSAsync(string ObjectAddress, string ObjectName, string Description, string MacAddress) {
            this.UpdateBluecatDNSAsync(ObjectAddress, ObjectName, Description, MacAddress, null);
        }
        
        /// <remarks/>
        public void UpdateBluecatDNSAsync(string ObjectAddress, string ObjectName, string Description, string MacAddress, object userState) {
            if ((this.UpdateBluecatDNSOperationCompleted == null)) {
                this.UpdateBluecatDNSOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateBluecatDNSOperationCompleted);
            }
            this.InvokeAsync("UpdateBluecatDNS", new object[] {
                        ObjectAddress,
                        ObjectName,
                        Description,
                        MacAddress}, this.UpdateBluecatDNSOperationCompleted, userState);
        }
        
        private void OnUpdateBluecatDNSOperationCompleted(object arg) {
            if ((this.UpdateBluecatDNSCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateBluecatDNSCompleted(this, new UpdateBluecatDNSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteBluecatDNS", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DeleteBluecatDNS(string ObjectAddress, string ObjectName, bool IncludeStaging, bool Decommission) {
            object[] results = this.Invoke("DeleteBluecatDNS", new object[] {
                        ObjectAddress,
                        ObjectName,
                        IncludeStaging,
                        Decommission});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteBluecatDNSAsync(string ObjectAddress, string ObjectName, bool IncludeStaging, bool Decommission) {
            this.DeleteBluecatDNSAsync(ObjectAddress, ObjectName, IncludeStaging, Decommission, null);
        }
        
        /// <remarks/>
        public void DeleteBluecatDNSAsync(string ObjectAddress, string ObjectName, bool IncludeStaging, bool Decommission, object userState) {
            if ((this.DeleteBluecatDNSOperationCompleted == null)) {
                this.DeleteBluecatDNSOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteBluecatDNSOperationCompleted);
            }
            this.InvokeAsync("DeleteBluecatDNS", new object[] {
                        ObjectAddress,
                        ObjectName,
                        IncludeStaging,
                        Decommission}, this.DeleteBluecatDNSOperationCompleted, userState);
        }
        
        private void OnDeleteBluecatDNSOperationCompleted(object arg) {
            if ((this.DeleteBluecatDNSCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteBluecatDNSCompleted(this, new DeleteBluecatDNSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SearchBluecatDNS", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SearchBluecatDNS(string ObjectAddress, string ObjectName) {
            object[] results = this.Invoke("SearchBluecatDNS", new object[] {
                        ObjectAddress,
                        ObjectName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SearchBluecatDNSAsync(string ObjectAddress, string ObjectName) {
            this.SearchBluecatDNSAsync(ObjectAddress, ObjectName, null);
        }
        
        /// <remarks/>
        public void SearchBluecatDNSAsync(string ObjectAddress, string ObjectName, object userState) {
            if ((this.SearchBluecatDNSOperationCompleted == null)) {
                this.SearchBluecatDNSOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSearchBluecatDNSOperationCompleted);
            }
            this.InvokeAsync("SearchBluecatDNS", new object[] {
                        ObjectAddress,
                        ObjectName}, this.SearchBluecatDNSOperationCompleted, userState);
        }
        
        private void OnSearchBluecatDNSOperationCompleted(object arg) {
            if ((this.SearchBluecatDNSCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SearchBluecatDNSCompleted(this, new SearchBluecatDNSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateBluecatDescriptionDNS", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UpdateBluecatDescriptionDNS(string ObjectAddress, string Description) {
            object[] results = this.Invoke("UpdateBluecatDescriptionDNS", new object[] {
                        ObjectAddress,
                        Description});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateBluecatDescriptionDNSAsync(string ObjectAddress, string Description) {
            this.UpdateBluecatDescriptionDNSAsync(ObjectAddress, Description, null);
        }
        
        /// <remarks/>
        public void UpdateBluecatDescriptionDNSAsync(string ObjectAddress, string Description, object userState) {
            if ((this.UpdateBluecatDescriptionDNSOperationCompleted == null)) {
                this.UpdateBluecatDescriptionDNSOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateBluecatDescriptionDNSOperationCompleted);
            }
            this.InvokeAsync("UpdateBluecatDescriptionDNS", new object[] {
                        ObjectAddress,
                        Description}, this.UpdateBluecatDescriptionDNSOperationCompleted, userState);
        }
        
        private void OnUpdateBluecatDescriptionDNSOperationCompleted(object arg) {
            if ((this.UpdateBluecatDescriptionDNSCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateBluecatDescriptionDNSCompleted(this, new UpdateBluecatDescriptionDNSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAvamarGrid", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetAvamarGrid(string grid) {
            object[] results = this.Invoke("GetAvamarGrid", new object[] {
                        grid});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetAvamarGridAsync(string grid) {
            this.GetAvamarGridAsync(grid, null);
        }
        
        /// <remarks/>
        public void GetAvamarGridAsync(string grid, object userState) {
            if ((this.GetAvamarGridOperationCompleted == null)) {
                this.GetAvamarGridOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAvamarGridOperationCompleted);
            }
            this.InvokeAsync("GetAvamarGrid", new object[] {
                        grid}, this.GetAvamarGridOperationCompleted, userState);
        }
        
        private void OnGetAvamarGridOperationCompleted(object arg) {
            if ((this.GetAvamarGridCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAvamarGridCompleted(this, new GetAvamarGridCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddAvamarClient", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AddAvamarClient(string grid, string fully_qualified_domain_name, string fully_qualified_client_name, string ipaddress) {
            object[] results = this.Invoke("AddAvamarClient", new object[] {
                        grid,
                        fully_qualified_domain_name,
                        fully_qualified_client_name,
                        ipaddress});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AddAvamarClientAsync(string grid, string fully_qualified_domain_name, string fully_qualified_client_name, string ipaddress) {
            this.AddAvamarClientAsync(grid, fully_qualified_domain_name, fully_qualified_client_name, ipaddress, null);
        }
        
        /// <remarks/>
        public void AddAvamarClientAsync(string grid, string fully_qualified_domain_name, string fully_qualified_client_name, string ipaddress, object userState) {
            if ((this.AddAvamarClientOperationCompleted == null)) {
                this.AddAvamarClientOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddAvamarClientOperationCompleted);
            }
            this.InvokeAsync("AddAvamarClient", new object[] {
                        grid,
                        fully_qualified_domain_name,
                        fully_qualified_client_name,
                        ipaddress}, this.AddAvamarClientOperationCompleted, userState);
        }
        
        private void OnAddAvamarClientOperationCompleted(object arg) {
            if ((this.AddAvamarClientCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddAvamarClientCompleted(this, new AddAvamarClientCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAvamarClient", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetAvamarClient(string grid, string fully_qualified_domain_name, string fully_qualified_client_name) {
            object[] results = this.Invoke("GetAvamarClient", new object[] {
                        grid,
                        fully_qualified_domain_name,
                        fully_qualified_client_name});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetAvamarClientAsync(string grid, string fully_qualified_domain_name, string fully_qualified_client_name) {
            this.GetAvamarClientAsync(grid, fully_qualified_domain_name, fully_qualified_client_name, null);
        }
        
        /// <remarks/>
        public void GetAvamarClientAsync(string grid, string fully_qualified_domain_name, string fully_qualified_client_name, object userState) {
            if ((this.GetAvamarClientOperationCompleted == null)) {
                this.GetAvamarClientOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAvamarClientOperationCompleted);
            }
            this.InvokeAsync("GetAvamarClient", new object[] {
                        grid,
                        fully_qualified_domain_name,
                        fully_qualified_client_name}, this.GetAvamarClientOperationCompleted, userState);
        }
        
        private void OnGetAvamarClientOperationCompleted(object arg) {
            if ((this.GetAvamarClientCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAvamarClientCompleted(this, new GetAvamarClientCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateAvamarClient", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UpdateAvamarClient(string grid, string fully_qualified_domain_name, string fully_qualified_client_name, bool enabled) {
            object[] results = this.Invoke("UpdateAvamarClient", new object[] {
                        grid,
                        fully_qualified_domain_name,
                        fully_qualified_client_name,
                        enabled});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateAvamarClientAsync(string grid, string fully_qualified_domain_name, string fully_qualified_client_name, bool enabled) {
            this.UpdateAvamarClientAsync(grid, fully_qualified_domain_name, fully_qualified_client_name, enabled, null);
        }
        
        /// <remarks/>
        public void UpdateAvamarClientAsync(string grid, string fully_qualified_domain_name, string fully_qualified_client_name, bool enabled, object userState) {
            if ((this.UpdateAvamarClientOperationCompleted == null)) {
                this.UpdateAvamarClientOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateAvamarClientOperationCompleted);
            }
            this.InvokeAsync("UpdateAvamarClient", new object[] {
                        grid,
                        fully_qualified_domain_name,
                        fully_qualified_client_name,
                        enabled}, this.UpdateAvamarClientOperationCompleted, userState);
        }
        
        private void OnUpdateAvamarClientOperationCompleted(object arg) {
            if ((this.UpdateAvamarClientCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateAvamarClientCompleted(this, new UpdateAvamarClientCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ActivateAvamarClient", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ActivateAvamarClient(string grid, string fully_qualified_domain_name, string fully_qualified_client_name) {
            object[] results = this.Invoke("ActivateAvamarClient", new object[] {
                        grid,
                        fully_qualified_domain_name,
                        fully_qualified_client_name});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ActivateAvamarClientAsync(string grid, string fully_qualified_domain_name, string fully_qualified_client_name) {
            this.ActivateAvamarClientAsync(grid, fully_qualified_domain_name, fully_qualified_client_name, null);
        }
        
        /// <remarks/>
        public void ActivateAvamarClientAsync(string grid, string fully_qualified_domain_name, string fully_qualified_client_name, object userState) {
            if ((this.ActivateAvamarClientOperationCompleted == null)) {
                this.ActivateAvamarClientOperationCompleted = new System.Threading.SendOrPostCallback(this.OnActivateAvamarClientOperationCompleted);
            }
            this.InvokeAsync("ActivateAvamarClient", new object[] {
                        grid,
                        fully_qualified_domain_name,
                        fully_qualified_client_name}, this.ActivateAvamarClientOperationCompleted, userState);
        }
        
        private void OnActivateAvamarClientOperationCompleted(object arg) {
            if ((this.ActivateAvamarClientCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ActivateAvamarClientCompleted(this, new ActivateAvamarClientCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteAvamarClient", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DeleteAvamarClient(string grid, string fully_qualified_domain_name, string fully_qualified_client_name) {
            object[] results = this.Invoke("DeleteAvamarClient", new object[] {
                        grid,
                        fully_qualified_domain_name,
                        fully_qualified_client_name});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteAvamarClientAsync(string grid, string fully_qualified_domain_name, string fully_qualified_client_name) {
            this.DeleteAvamarClientAsync(grid, fully_qualified_domain_name, fully_qualified_client_name, null);
        }
        
        /// <remarks/>
        public void DeleteAvamarClientAsync(string grid, string fully_qualified_domain_name, string fully_qualified_client_name, object userState) {
            if ((this.DeleteAvamarClientOperationCompleted == null)) {
                this.DeleteAvamarClientOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteAvamarClientOperationCompleted);
            }
            this.InvokeAsync("DeleteAvamarClient", new object[] {
                        grid,
                        fully_qualified_domain_name,
                        fully_qualified_client_name}, this.DeleteAvamarClientOperationCompleted, userState);
        }
        
        private void OnDeleteAvamarClientOperationCompleted(object arg) {
            if ((this.DeleteAvamarClientCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteAvamarClientCompleted(this, new DeleteAvamarClientCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAvamarDomains", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetAvamarDomains(string grid) {
            object[] results = this.Invoke("GetAvamarDomains", new object[] {
                        grid});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetAvamarDomainsAsync(string grid) {
            this.GetAvamarDomainsAsync(grid, null);
        }
        
        /// <remarks/>
        public void GetAvamarDomainsAsync(string grid, object userState) {
            if ((this.GetAvamarDomainsOperationCompleted == null)) {
                this.GetAvamarDomainsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAvamarDomainsOperationCompleted);
            }
            this.InvokeAsync("GetAvamarDomains", new object[] {
                        grid}, this.GetAvamarDomainsOperationCompleted, userState);
        }
        
        private void OnGetAvamarDomainsOperationCompleted(object arg) {
            if ((this.GetAvamarDomainsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAvamarDomainsCompleted(this, new GetAvamarDomainsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAvamarDomainClients", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetAvamarDomainClients(string grid, string domain) {
            object[] results = this.Invoke("GetAvamarDomainClients", new object[] {
                        grid,
                        domain});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetAvamarDomainClientsAsync(string grid, string domain) {
            this.GetAvamarDomainClientsAsync(grid, domain, null);
        }
        
        /// <remarks/>
        public void GetAvamarDomainClientsAsync(string grid, string domain, object userState) {
            if ((this.GetAvamarDomainClientsOperationCompleted == null)) {
                this.GetAvamarDomainClientsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAvamarDomainClientsOperationCompleted);
            }
            this.InvokeAsync("GetAvamarDomainClients", new object[] {
                        grid,
                        domain}, this.GetAvamarDomainClientsOperationCompleted, userState);
        }
        
        private void OnGetAvamarDomainClientsOperationCompleted(object arg) {
            if ((this.GetAvamarDomainClientsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAvamarDomainClientsCompleted(this, new GetAvamarDomainClientsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAvamarGroups", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetAvamarGroups(string grid) {
            object[] results = this.Invoke("GetAvamarGroups", new object[] {
                        grid});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetAvamarGroupsAsync(string grid) {
            this.GetAvamarGroupsAsync(grid, null);
        }
        
        /// <remarks/>
        public void GetAvamarGroupsAsync(string grid, object userState) {
            if ((this.GetAvamarGroupsOperationCompleted == null)) {
                this.GetAvamarGroupsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAvamarGroupsOperationCompleted);
            }
            this.InvokeAsync("GetAvamarGroups", new object[] {
                        grid}, this.GetAvamarGroupsOperationCompleted, userState);
        }
        
        private void OnGetAvamarGroupsOperationCompleted(object arg) {
            if ((this.GetAvamarGroupsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAvamarGroupsCompleted(this, new GetAvamarGroupsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddAvamarGroup", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AddAvamarGroup(string grid, string fully_qualified_domain_name, string fully_qualified_client_name, string fully_qualified_group_name) {
            object[] results = this.Invoke("AddAvamarGroup", new object[] {
                        grid,
                        fully_qualified_domain_name,
                        fully_qualified_client_name,
                        fully_qualified_group_name});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AddAvamarGroupAsync(string grid, string fully_qualified_domain_name, string fully_qualified_client_name, string fully_qualified_group_name) {
            this.AddAvamarGroupAsync(grid, fully_qualified_domain_name, fully_qualified_client_name, fully_qualified_group_name, null);
        }
        
        /// <remarks/>
        public void AddAvamarGroupAsync(string grid, string fully_qualified_domain_name, string fully_qualified_client_name, string fully_qualified_group_name, object userState) {
            if ((this.AddAvamarGroupOperationCompleted == null)) {
                this.AddAvamarGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddAvamarGroupOperationCompleted);
            }
            this.InvokeAsync("AddAvamarGroup", new object[] {
                        grid,
                        fully_qualified_domain_name,
                        fully_qualified_client_name,
                        fully_qualified_group_name}, this.AddAvamarGroupOperationCompleted, userState);
        }
        
        private void OnAddAvamarGroupOperationCompleted(object arg) {
            if ((this.AddAvamarGroupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddAvamarGroupCompleted(this, new AddAvamarGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAvamarGroupClients", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetAvamarGroupClients(string grid, string fully_qualified_group_name) {
            object[] results = this.Invoke("GetAvamarGroupClients", new object[] {
                        grid,
                        fully_qualified_group_name});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetAvamarGroupClientsAsync(string grid, string fully_qualified_group_name) {
            this.GetAvamarGroupClientsAsync(grid, fully_qualified_group_name, null);
        }
        
        /// <remarks/>
        public void GetAvamarGroupClientsAsync(string grid, string fully_qualified_group_name, object userState) {
            if ((this.GetAvamarGroupClientsOperationCompleted == null)) {
                this.GetAvamarGroupClientsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAvamarGroupClientsOperationCompleted);
            }
            this.InvokeAsync("GetAvamarGroupClients", new object[] {
                        grid,
                        fully_qualified_group_name}, this.GetAvamarGroupClientsOperationCompleted, userState);
        }
        
        private void OnGetAvamarGroupClientsOperationCompleted(object arg) {
            if ((this.GetAvamarGroupClientsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAvamarGroupClientsCompleted(this, new GetAvamarGroupClientsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteAvamarGroup", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DeleteAvamarGroup(string grid, string fully_qualified_domain_name, string fully_qualified_client_name, string fully_qualified_group_name) {
            object[] results = this.Invoke("DeleteAvamarGroup", new object[] {
                        grid,
                        fully_qualified_domain_name,
                        fully_qualified_client_name,
                        fully_qualified_group_name});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteAvamarGroupAsync(string grid, string fully_qualified_domain_name, string fully_qualified_client_name, string fully_qualified_group_name) {
            this.DeleteAvamarGroupAsync(grid, fully_qualified_domain_name, fully_qualified_client_name, fully_qualified_group_name, null);
        }
        
        /// <remarks/>
        public void DeleteAvamarGroupAsync(string grid, string fully_qualified_domain_name, string fully_qualified_client_name, string fully_qualified_group_name, object userState) {
            if ((this.DeleteAvamarGroupOperationCompleted == null)) {
                this.DeleteAvamarGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteAvamarGroupOperationCompleted);
            }
            this.InvokeAsync("DeleteAvamarGroup", new object[] {
                        grid,
                        fully_qualified_domain_name,
                        fully_qualified_client_name,
                        fully_qualified_group_name}, this.DeleteAvamarGroupOperationCompleted, userState);
        }
        
        private void OnDeleteAvamarGroupOperationCompleted(object arg) {
            if ((this.DeleteAvamarGroupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteAvamarGroupCompleted(this, new DeleteAvamarGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAvamarBackup", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetAvamarBackup(string grid, string fully_qualified_domain_name, string fully_qualified_client_name) {
            object[] results = this.Invoke("GetAvamarBackup", new object[] {
                        grid,
                        fully_qualified_domain_name,
                        fully_qualified_client_name});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetAvamarBackupAsync(string grid, string fully_qualified_domain_name, string fully_qualified_client_name) {
            this.GetAvamarBackupAsync(grid, fully_qualified_domain_name, fully_qualified_client_name, null);
        }
        
        /// <remarks/>
        public void GetAvamarBackupAsync(string grid, string fully_qualified_domain_name, string fully_qualified_client_name, object userState) {
            if ((this.GetAvamarBackupOperationCompleted == null)) {
                this.GetAvamarBackupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAvamarBackupOperationCompleted);
            }
            this.InvokeAsync("GetAvamarBackup", new object[] {
                        grid,
                        fully_qualified_domain_name,
                        fully_qualified_client_name}, this.GetAvamarBackupOperationCompleted, userState);
        }
        
        private void OnGetAvamarBackupOperationCompleted(object arg) {
            if ((this.GetAvamarBackupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAvamarBackupCompleted(this, new GetAvamarBackupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/StartAvamarBackup", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string StartAvamarBackup(string grid, string fully_qualified_domain_name, string fully_qualified_group_name, string fully_qualified_client_name) {
            object[] results = this.Invoke("StartAvamarBackup", new object[] {
                        grid,
                        fully_qualified_domain_name,
                        fully_qualified_group_name,
                        fully_qualified_client_name});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void StartAvamarBackupAsync(string grid, string fully_qualified_domain_name, string fully_qualified_group_name, string fully_qualified_client_name) {
            this.StartAvamarBackupAsync(grid, fully_qualified_domain_name, fully_qualified_group_name, fully_qualified_client_name, null);
        }
        
        /// <remarks/>
        public void StartAvamarBackupAsync(string grid, string fully_qualified_domain_name, string fully_qualified_group_name, string fully_qualified_client_name, object userState) {
            if ((this.StartAvamarBackupOperationCompleted == null)) {
                this.StartAvamarBackupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnStartAvamarBackupOperationCompleted);
            }
            this.InvokeAsync("StartAvamarBackup", new object[] {
                        grid,
                        fully_qualified_domain_name,
                        fully_qualified_group_name,
                        fully_qualified_client_name}, this.StartAvamarBackupOperationCompleted, userState);
        }
        
        private void OnStartAvamarBackupOperationCompleted(object arg) {
            if ((this.StartAvamarBackupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.StartAvamarBackupCompleted(this, new StartAvamarBackupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ConfigureWindowsIPAddress", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ConfigureWindowsIPAddress(int intAnswer, int intNumber, string ScriptEnvironment, string strIP, string[] strServersDNS, string strMACAddress, string strName, string strSerial) {
            object[] results = this.Invoke("ConfigureWindowsIPAddress", new object[] {
                        intAnswer,
                        intNumber,
                        ScriptEnvironment,
                        strIP,
                        strServersDNS,
                        strMACAddress,
                        strName,
                        strSerial});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ConfigureWindowsIPAddressAsync(int intAnswer, int intNumber, string ScriptEnvironment, string strIP, string[] strServersDNS, string strMACAddress, string strName, string strSerial) {
            this.ConfigureWindowsIPAddressAsync(intAnswer, intNumber, ScriptEnvironment, strIP, strServersDNS, strMACAddress, strName, strSerial, null);
        }
        
        /// <remarks/>
        public void ConfigureWindowsIPAddressAsync(int intAnswer, int intNumber, string ScriptEnvironment, string strIP, string[] strServersDNS, string strMACAddress, string strName, string strSerial, object userState) {
            if ((this.ConfigureWindowsIPAddressOperationCompleted == null)) {
                this.ConfigureWindowsIPAddressOperationCompleted = new System.Threading.SendOrPostCallback(this.OnConfigureWindowsIPAddressOperationCompleted);
            }
            this.InvokeAsync("ConfigureWindowsIPAddress", new object[] {
                        intAnswer,
                        intNumber,
                        ScriptEnvironment,
                        strIP,
                        strServersDNS,
                        strMACAddress,
                        strName,
                        strSerial}, this.ConfigureWindowsIPAddressOperationCompleted, userState);
        }
        
        private void OnConfigureWindowsIPAddressOperationCompleted(object arg) {
            if ((this.ConfigureWindowsIPAddressCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ConfigureWindowsIPAddressCompleted(this, new ConfigureWindowsIPAddressCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateServiceNowServer", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CreateServiceNowServer(
                    string URL, 
                    string Domain, 
                    string IP, 
                    string Manufacturer, 
                    string Mnemonic, 
                    string Model, 
                    string Name, 
                    string ZeusBuildTypeForOperatingSystem, 
                    string Serial, 
                    string ServiceNowClass, 
                    string ServiceNowEnvironment, 
                    bool IsVirtual, 
                    System.DateTime Installed, 
                    string ServiceNowLocation, 
                    string BuildingCodeForDataCenter, 
                    string Username, 
                    string Password) {
            object[] results = this.Invoke("CreateServiceNowServer", new object[] {
                        URL,
                        Domain,
                        IP,
                        Manufacturer,
                        Mnemonic,
                        Model,
                        Name,
                        ZeusBuildTypeForOperatingSystem,
                        Serial,
                        ServiceNowClass,
                        ServiceNowEnvironment,
                        IsVirtual,
                        Installed,
                        ServiceNowLocation,
                        BuildingCodeForDataCenter,
                        Username,
                        Password});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CreateServiceNowServerAsync(
                    string URL, 
                    string Domain, 
                    string IP, 
                    string Manufacturer, 
                    string Mnemonic, 
                    string Model, 
                    string Name, 
                    string ZeusBuildTypeForOperatingSystem, 
                    string Serial, 
                    string ServiceNowClass, 
                    string ServiceNowEnvironment, 
                    bool IsVirtual, 
                    System.DateTime Installed, 
                    string ServiceNowLocation, 
                    string BuildingCodeForDataCenter, 
                    string Username, 
                    string Password) {
            this.CreateServiceNowServerAsync(URL, Domain, IP, Manufacturer, Mnemonic, Model, Name, ZeusBuildTypeForOperatingSystem, Serial, ServiceNowClass, ServiceNowEnvironment, IsVirtual, Installed, ServiceNowLocation, BuildingCodeForDataCenter, Username, Password, null);
        }
        
        /// <remarks/>
        public void CreateServiceNowServerAsync(
                    string URL, 
                    string Domain, 
                    string IP, 
                    string Manufacturer, 
                    string Mnemonic, 
                    string Model, 
                    string Name, 
                    string ZeusBuildTypeForOperatingSystem, 
                    string Serial, 
                    string ServiceNowClass, 
                    string ServiceNowEnvironment, 
                    bool IsVirtual, 
                    System.DateTime Installed, 
                    string ServiceNowLocation, 
                    string BuildingCodeForDataCenter, 
                    string Username, 
                    string Password, 
                    object userState) {
            if ((this.CreateServiceNowServerOperationCompleted == null)) {
                this.CreateServiceNowServerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateServiceNowServerOperationCompleted);
            }
            this.InvokeAsync("CreateServiceNowServer", new object[] {
                        URL,
                        Domain,
                        IP,
                        Manufacturer,
                        Mnemonic,
                        Model,
                        Name,
                        ZeusBuildTypeForOperatingSystem,
                        Serial,
                        ServiceNowClass,
                        ServiceNowEnvironment,
                        IsVirtual,
                        Installed,
                        ServiceNowLocation,
                        BuildingCodeForDataCenter,
                        Username,
                        Password}, this.CreateServiceNowServerOperationCompleted, userState);
        }
        
        private void OnCreateServiceNowServerOperationCompleted(object arg) {
            if ((this.CreateServiceNowServerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateServiceNowServerCompleted(this, new CreateServiceNowServerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetServiceNowServer", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetServiceNowServer(string URL, string Username, string Password, string Name) {
            object[] results = this.Invoke("GetServiceNowServer", new object[] {
                        URL,
                        Username,
                        Password,
                        Name});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetServiceNowServerAsync(string URL, string Username, string Password, string Name) {
            this.GetServiceNowServerAsync(URL, Username, Password, Name, null);
        }
        
        /// <remarks/>
        public void GetServiceNowServerAsync(string URL, string Username, string Password, string Name, object userState) {
            if ((this.GetServiceNowServerOperationCompleted == null)) {
                this.GetServiceNowServerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetServiceNowServerOperationCompleted);
            }
            this.InvokeAsync("GetServiceNowServer", new object[] {
                        URL,
                        Username,
                        Password,
                        Name}, this.GetServiceNowServerOperationCompleted, userState);
        }
        
        private void OnGetServiceNowServerOperationCompleted(object arg) {
            if ((this.GetServiceNowServerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetServiceNowServerCompleted(this, new GetServiceNowServerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DecomServiceNowServer", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DecomServiceNowServer(string URL, string Username, string Password, string Name) {
            object[] results = this.Invoke("DecomServiceNowServer", new object[] {
                        URL,
                        Username,
                        Password,
                        Name});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DecomServiceNowServerAsync(string URL, string Username, string Password, string Name) {
            this.DecomServiceNowServerAsync(URL, Username, Password, Name, null);
        }
        
        /// <remarks/>
        public void DecomServiceNowServerAsync(string URL, string Username, string Password, string Name, object userState) {
            if ((this.DecomServiceNowServerOperationCompleted == null)) {
                this.DecomServiceNowServerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDecomServiceNowServerOperationCompleted);
            }
            this.InvokeAsync("DecomServiceNowServer", new object[] {
                        URL,
                        Username,
                        Password,
                        Name}, this.DecomServiceNowServerOperationCompleted, userState);
        }
        
        private void OnDecomServiceNowServerOperationCompleted(object arg) {
            if ((this.DecomServiceNowServerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DecomServiceNowServerCompleted(this, new DecomServiceNowServerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DestroyServiceNowServer", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DestroyServiceNowServer(string URL, string Username, string Password, string Name) {
            object[] results = this.Invoke("DestroyServiceNowServer", new object[] {
                        URL,
                        Username,
                        Password,
                        Name});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DestroyServiceNowServerAsync(string URL, string Username, string Password, string Name) {
            this.DestroyServiceNowServerAsync(URL, Username, Password, Name, null);
        }
        
        /// <remarks/>
        public void DestroyServiceNowServerAsync(string URL, string Username, string Password, string Name, object userState) {
            if ((this.DestroyServiceNowServerOperationCompleted == null)) {
                this.DestroyServiceNowServerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDestroyServiceNowServerOperationCompleted);
            }
            this.InvokeAsync("DestroyServiceNowServer", new object[] {
                        URL,
                        Username,
                        Password,
                        Name}, this.DestroyServiceNowServerOperationCompleted, userState);
        }
        
        private void OnDestroyServiceNowServerOperationCompleted(object arg) {
            if ((this.DestroyServiceNowServerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DestroyServiceNowServerCompleted(this, new DestroyServiceNowServerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RecomServiceNowServer", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string RecomServiceNowServer(string URL, string Username, string Password, string Name) {
            object[] results = this.Invoke("RecomServiceNowServer", new object[] {
                        URL,
                        Username,
                        Password,
                        Name});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void RecomServiceNowServerAsync(string URL, string Username, string Password, string Name) {
            this.RecomServiceNowServerAsync(URL, Username, Password, Name, null);
        }
        
        /// <remarks/>
        public void RecomServiceNowServerAsync(string URL, string Username, string Password, string Name, object userState) {
            if ((this.RecomServiceNowServerOperationCompleted == null)) {
                this.RecomServiceNowServerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRecomServiceNowServerOperationCompleted);
            }
            this.InvokeAsync("RecomServiceNowServer", new object[] {
                        URL,
                        Username,
                        Password,
                        Name}, this.RecomServiceNowServerOperationCompleted, userState);
        }
        
        private void OnRecomServiceNowServerOperationCompleted(object arg) {
            if ((this.RecomServiceNowServerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RecomServiceNowServerCompleted(this, new RecomServiceNowServerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetServiceNowIncidentNumber", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetServiceNowIncidentNumber(string URL, string Username, string Password, string Number) {
            object[] results = this.Invoke("GetServiceNowIncidentNumber", new object[] {
                        URL,
                        Username,
                        Password,
                        Number});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetServiceNowIncidentNumberAsync(string URL, string Username, string Password, string Number) {
            this.GetServiceNowIncidentNumberAsync(URL, Username, Password, Number, null);
        }
        
        /// <remarks/>
        public void GetServiceNowIncidentNumberAsync(string URL, string Username, string Password, string Number, object userState) {
            if ((this.GetServiceNowIncidentNumberOperationCompleted == null)) {
                this.GetServiceNowIncidentNumberOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetServiceNowIncidentNumberOperationCompleted);
            }
            this.InvokeAsync("GetServiceNowIncidentNumber", new object[] {
                        URL,
                        Username,
                        Password,
                        Number}, this.GetServiceNowIncidentNumberOperationCompleted, userState);
        }
        
        private void OnGetServiceNowIncidentNumberOperationCompleted(object arg) {
            if ((this.GetServiceNowIncidentNumberCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetServiceNowIncidentNumberCompleted(this, new GetServiceNowIncidentNumberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetServiceNowIncident", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetServiceNowIncident(string URL, string Username, string Password, int ErrorID, string What) {
            object[] results = this.Invoke("GetServiceNowIncident", new object[] {
                        URL,
                        Username,
                        Password,
                        ErrorID,
                        What});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetServiceNowIncidentAsync(string URL, string Username, string Password, int ErrorID, string What) {
            this.GetServiceNowIncidentAsync(URL, Username, Password, ErrorID, What, null);
        }
        
        /// <remarks/>
        public void GetServiceNowIncidentAsync(string URL, string Username, string Password, int ErrorID, string What, object userState) {
            if ((this.GetServiceNowIncidentOperationCompleted == null)) {
                this.GetServiceNowIncidentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetServiceNowIncidentOperationCompleted);
            }
            this.InvokeAsync("GetServiceNowIncident", new object[] {
                        URL,
                        Username,
                        Password,
                        ErrorID,
                        What}, this.GetServiceNowIncidentOperationCompleted, userState);
        }
        
        private void OnGetServiceNowIncidentOperationCompleted(object arg) {
            if ((this.GetServiceNowIncidentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetServiceNowIncidentCompleted(this, new GetServiceNowIncidentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void CreateDNSforPNCCompletedEventHandler(object sender, CreateDNSforPNCCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateDNSforPNCCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateDNSforPNCCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void UpdateDNSforPNCCompletedEventHandler(object sender, UpdateDNSforPNCCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateDNSforPNCCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateDNSforPNCCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void DeleteDNSforPNCCompletedEventHandler(object sender, DeleteDNSforPNCCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteDNSforPNCCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteDNSforPNCCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void SearchDNSforPNCCompletedEventHandler(object sender, SearchDNSforPNCCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SearchDNSforPNCCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SearchDNSforPNCCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetMacFromILOCompletedEventHandler(object sender, GetMacFromILOCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMacFromILOCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMacFromILOCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void CreateBluecatDNSCompletedEventHandler(object sender, CreateBluecatDNSCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateBluecatDNSCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateBluecatDNSCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void UpdateBluecatDNSCompletedEventHandler(object sender, UpdateBluecatDNSCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateBluecatDNSCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateBluecatDNSCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void DeleteBluecatDNSCompletedEventHandler(object sender, DeleteBluecatDNSCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteBluecatDNSCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteBluecatDNSCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void SearchBluecatDNSCompletedEventHandler(object sender, SearchBluecatDNSCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SearchBluecatDNSCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SearchBluecatDNSCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void UpdateBluecatDescriptionDNSCompletedEventHandler(object sender, UpdateBluecatDescriptionDNSCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateBluecatDescriptionDNSCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateBluecatDescriptionDNSCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetAvamarGridCompletedEventHandler(object sender, GetAvamarGridCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAvamarGridCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAvamarGridCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void AddAvamarClientCompletedEventHandler(object sender, AddAvamarClientCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddAvamarClientCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddAvamarClientCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetAvamarClientCompletedEventHandler(object sender, GetAvamarClientCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAvamarClientCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAvamarClientCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void UpdateAvamarClientCompletedEventHandler(object sender, UpdateAvamarClientCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateAvamarClientCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateAvamarClientCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void ActivateAvamarClientCompletedEventHandler(object sender, ActivateAvamarClientCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ActivateAvamarClientCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ActivateAvamarClientCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void DeleteAvamarClientCompletedEventHandler(object sender, DeleteAvamarClientCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteAvamarClientCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteAvamarClientCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetAvamarDomainsCompletedEventHandler(object sender, GetAvamarDomainsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAvamarDomainsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAvamarDomainsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetAvamarDomainClientsCompletedEventHandler(object sender, GetAvamarDomainClientsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAvamarDomainClientsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAvamarDomainClientsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetAvamarGroupsCompletedEventHandler(object sender, GetAvamarGroupsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAvamarGroupsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAvamarGroupsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void AddAvamarGroupCompletedEventHandler(object sender, AddAvamarGroupCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddAvamarGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddAvamarGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetAvamarGroupClientsCompletedEventHandler(object sender, GetAvamarGroupClientsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAvamarGroupClientsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAvamarGroupClientsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void DeleteAvamarGroupCompletedEventHandler(object sender, DeleteAvamarGroupCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteAvamarGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteAvamarGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetAvamarBackupCompletedEventHandler(object sender, GetAvamarBackupCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAvamarBackupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAvamarBackupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void StartAvamarBackupCompletedEventHandler(object sender, StartAvamarBackupCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class StartAvamarBackupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal StartAvamarBackupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void ConfigureWindowsIPAddressCompletedEventHandler(object sender, ConfigureWindowsIPAddressCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ConfigureWindowsIPAddressCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ConfigureWindowsIPAddressCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void CreateServiceNowServerCompletedEventHandler(object sender, CreateServiceNowServerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateServiceNowServerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateServiceNowServerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetServiceNowServerCompletedEventHandler(object sender, GetServiceNowServerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetServiceNowServerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetServiceNowServerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void DecomServiceNowServerCompletedEventHandler(object sender, DecomServiceNowServerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DecomServiceNowServerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DecomServiceNowServerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void DestroyServiceNowServerCompletedEventHandler(object sender, DestroyServiceNowServerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DestroyServiceNowServerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DestroyServiceNowServerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void RecomServiceNowServerCompletedEventHandler(object sender, RecomServiceNowServerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RecomServiceNowServerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RecomServiceNowServerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetServiceNowIncidentNumberCompletedEventHandler(object sender, GetServiceNowIncidentNumberCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetServiceNowIncidentNumberCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetServiceNowIncidentNumberCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetServiceNowIncidentCompletedEventHandler(object sender, GetServiceNowIncidentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetServiceNowIncidentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetServiceNowIncidentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591